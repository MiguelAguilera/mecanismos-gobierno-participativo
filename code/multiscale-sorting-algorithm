#!/usr/bin/python

import matplotlib.pyplot as plt
import numpy as np
import csv
import time,datetime


#Get the probability density function of an array
def pdf(x,bins):
	H, edges = np.histogramdd(x,bins)
	return H/np.sum(H)

#Transform an array into an array of continuously increasing integers
def uniquelist(x):
	vals, inds = np.unique(x, return_index=True)
	x1=np.copy(x)
	for i in range(len(x)):
		x1[i]= np.where(vals==x[i])[0][0] 
	return x1
	
#Give a value to an array of timescales depending on its Entropy
def Entropy(x):

	xu=uniquelist(x)
	binsx=int(max(x)-min(x)+1)

	Px = pdf(xu,binsx)
	E=0.0
	for i in range(binsx):
		if Px[i]>0:
			E+=-Px[i]*np.log(Px[i])
	return E

#Give a value to a set of timescales depending on the covered range
def covered_range(x):
	xmin=np.min(x)
	xmax=np.max(x)
	return 1.0/(1.0+xmin)*(xmax-xmin)

#Get individual h parameters
def get_h(H,Hm,i):
	return H[i,:]*Hm[i,:]
	
#Compute individual fitness
def fitness(h,v,t):
	score=np.zeros(len(t))
	for i in range(len(h)):
		score+=h[i]*v*np.exp(-t*24*3600/20000.0/2.0**float(i))
	order=np.argsort(score)[::-1]
	scales=[4,8,16,32,64,128]
	fp=frontpage(h,v,t,max(scales))
	E=0
	R=0
	for s in scales:
		E += Entropy(fp[0:s])/float(len(scales))
		R += covered_range(fp[0:s])/float(len(scales))
	f=E*R
	return f
	
#Get the timescales of a frontpage of L elements
def frontpage(h,v,t,L):
	score=np.zeros(len(t))
	for i in range(len(h)):
		score+=h[i]*v*np.exp(-t/20000.0/2.0**float(i))
	order=np.argsort(score)[::-1]
	timescales=np.log2(t[order[0:L]]/3600/24)
	timescales*=(timescales>0).astype(float)
	frontpage=np.floor(timescales).astype(int)
	return frontpage


#Step of the microbial genetic algorithm	
def microbial_tournament(H,Hm,f,v,t):
	#Define recombination and mutation rates
	REC=0.5
	MUT=0.1
	
	#Select two random individuals for tournament
	i=np.random.randint(len(f))
	j=np.random.randint(len(f))
	while j==i:
		j=np.random.randint(len(f))
		
	#Tournament
	if f[j]>f[i]:
		i1=i
		i=j
		j=i1
		
	#Recombinate and mutate	
	for ind in range(H.shape[1]):
		if np.random.rand(1)<REC:
			H[j,ind]=H[i,ind]
			Hm[j,ind]=Hm[i,ind]
		if  np.random.rand(1)<MUT:
			H[j,ind]=np.random.rand(1)
			Hm[j,ind]=np.random.randint(0,2)

	#Evaluate new fitness
	f[j]=fitness(get_h(H,Hm,j),v,t)
	return H,Hm,f
	

#Get posts votes and lifetime

city='madrid'
#city='barcelona'
#city=None

if city==None:
	N=10000
	Tmax=10000
	t=np.random.rand(N)*Tmax
	v=np.random.rand(N)*t
	t*=3600*24
	
else:
	t=[]
	v=[]

	with open(city+'.csv') as csvfile:
		reader = csv.reader(csvfile, delimiter=',')
		c=0
		for row in reader:
			if c>0:
				v+=[int(row[-1])]
			
				t+=[time.mktime(time.strptime(row[-2], "%Y-%m-%dT%H:%M:%SZ"))]
			else:
				c+=1
	t=np.array(t)
	v=np.array(v)
	t=np.max(t)+1-t

order=np.argsort(t)
t=t[order]
v=v[order]

smin=np.min(np.log2(t/3600/24))
smin=np.floor(smin)*int(smin>0)
smax=np.floor(np.max(np.log2(t/3600/24)))



#Define variables of the genetic algorithm
M=20
Ng=100
H=np.random.rand(Ng,M)
Hm=np.random.randint(0,2,(Ng,M))
f=np.zeros(Ng)

#Run the genetic algorithm
rep=0
while(True):
	(H,Hm,f)=microbial_tournament(H,Hm,f,v,t)
	rep+=1
	
	if rep%100==0:
		print rep
		imax=np.argmax(f)
		print f[imax], np.mean(f),imax
		P=frontpage(get_h(H,Hm,imax),v,t,40)
		print get_h(H,Hm,imax)
		print P, np.min(P),np.max(P), smin, smax
exit (0)


